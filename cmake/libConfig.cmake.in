# Traveler Hauptman, 23 Aug 2013
# Simple template to find local includes and libraries before system ones.
#
# The variables LIBRARY_NAME and INCLUDE_PATH_INDICATOR_FILE are used
# this projects CMakeLists.txt generates xxxConfig.cmake  
#
# The variables LOCAL_FIND_PATHS and LOCAL_FIND_LIBRARY_PATHS are set
# by the calling CMakeLists.txt to where we expect to find the include
# directory indicator file. They will be set by the CMakeLists.txt 
# of the project trying to use this file via find_package(xxx)


# TEH_LIBRARY_NAME
# TEH_EXPORTED_LIBRARIES
# TEH_DEPENDENCY_LIBRARIES
# INCLUDE_PATH_INDICATOR_FILE
# TEH_INC_SUFFIX

# LOCAL_FIND_INCLUDE_PATHS
# LOCAL_FIND_LIBRARY_PATHS

### find and set xxx_LIBRARIES ###


list(APPEND	LIBRARIES_PROCESSING_LIST "@TEH_EXPORTED_LIBRARIES@")
FOREACH(elt IN LISTS LIBRARIES_PROCESSING_LIST) 
	# Search local paths first
	FIND_LIBRARY(${elt}_LIBRARY "${elt}"
		PATHS ${CMAKE_CURRENT_LIST_DIR} NO_DEFAULT_PATH)
	#	PATHS ${LOCAL_FIND_LIBRARY_PATHS} NO_DEFAULT_PATH)
	# Search system paths otherwise
	FIND_LIBRARY(${elt}_LIBRARY "${elt}"
		PATHS @CMAKE_INSTALL_PREFIX@/lib)

	if (${elt}_LIBRARY)
		list(APPEND @TEH_LIBRARY_NAME@_LIBRARIES ${${elt}_LIBRARY})
	endif()
endforeach()

list(APPEND @TEH_LIBRARY_NAME@_LIBRARIES "@TEH_DEPENDENCY_LIBRARIES@")


### find and set  xxx_INCLUDE_DIRS ###

# Search local paths first
# Our convention is that include files are next to library files so we 
# search ../include too.

FIND_PATH(@TEH_LIBRARY_NAME@_INCLUDE_DIR @INCLUDE_PATH_INDICATOR_FILE@
    PATHS ${LOCAL_FIND_INCLUDE_PATHS} ${LOCAL_FIND_LIBRARY_PATHS}
	PATH_SUFFIXES "../include" ${TEH_INC_SUFFIX} NO_DEFAULT_PATH)

# Search system paths otherwise
FIND_PATH(@TEH_LIBRARY_NAME@_INCLUDE_DIR @INCLUDE_PATH_INDICATOR_FILE@ 
	PATHS @CMAKE_INSTALL_PREFIX@/include)

SET(@TEH_LIBRARY_NAME@_INCLUDE_DIRS ${@TEH_LIBRARY_NAME@_INCLUDE_DIR})
list(APPEND @TEH_LIBRARY_NAME@_INCLUDE_DIRS "@TEH_DEPENDENCY_INCLUDE_DIRS@")

#SET(@LIBRARY_NAME@_DEFINITIONS ...)
# @LIBRARY_NAME@_FOUND is set to "1" by FIND_PACKAGE().

