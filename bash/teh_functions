#!/bin/bash
#
# Traveler Hauptman, Istituto Italiano di Tecnologia, 20 Aug 2013
# 
# Repo Build Publish helper utility

function try_goto_development_root
{
	#Always operate from .development_root
	if [ -f ./.development_root ]; then
		pushd . &>/dev/null
	elif [ -f ../.development_root ]; then
		pushd .. &>/dev/null
	elif [ -f ../../.development_root ]; then
		pushd ../.. &>/dev/null
	elif [ -f ../../../.development_root ]; then
		pushd ../../.. &>/dev/null
	elif [ -f ../../../../.development_root ]; then
		pushd ../../../.. &>/dev/null
	elif [ -f ../../../../../.development_root ]; then
		pushd ../../../../.. &>/dev/null
	fi
}

# Look for .development_root, push current dir and change to it if we find it.
function goto_development_root
{
	#Always operate from .development_root
	if [ -f ./.development_root ]; then
		pushd . &>/dev/null
	elif [ -f ../.development_root ]; then
		pushd .. &>/dev/null
	elif [ -f ../../.development_root ]; then
		pushd ../.. &>/dev/null
	elif [ -f ../../../.development_root ]; then
		pushd ../../.. &>/dev/null
	elif [ -f ../../../../.development_root ]; then
		pushd ../../../.. &>/dev/null
	elif [ -f ../../../../../.development_root ]; then
		pushd ../../../../.. &>/dev/null
	else 
		echo -e "\nCould not find .development_root! Change to a directory closer to it before running $0\n"
		exit 1
	fi
}

#Go either to the project root or to the development root 
function showhome
{
	[ -d ./build ] && cd ..
	while [ ! -f .development_root ] && [ ! -d ./build ] && [ ! -d dev ]; do cd ..; done
	echo $(pwd)
}

function showroot
{
	[ -d ./build ] && cd ..
	while [ ! -f .development_root ] &&  [ ! -d dev ]; do cd ..; done
	[ -f .development_root ] && echo "Root: $(pwd)"
}

function locate_project
{
	if [ -z $1 ]; then 
		if [ -d .git ] && [ -f CMakeLists.txt ];then
          TARGET=$(pwd)
		  echo -e "Has .git and CMakeLists.txt. Assuming it's a project."
		else
			while [ ! -f .development_root ] && [ ! -d ./build ] && [ ! -d dev ]; do echo "%$(pwd) ";cd ..; done
			echo "!!$(pwd)"
			if [ -d ./build ]; then
				TARGET=$(pwd)
				echo -e "$TARGET"
			else
				echo -e "\n[ERROR] You need to specify a target project. (Though I can guess the project if a PROJECT/build directory exists.\n"
			fi
		fi
	else
		TARGET=${1%/}
	fi	
}

function usage 
{
	echo "Program: $1"
	#sed  -e "s|teh|${1}|"  <<"==="
if [ $1 = "git" ];then
cat - <<"==="

  git
  ===
  teh git status              # Print status of each project
  teh git branch              # Print branch of each project
  teh git fetch               # Fetch each project

===

elif [ $1 = "cmake" ];then
cat - <<"==="

  cmake
  =====
  teh active                  # List of subfolders with cmake build directories
  teh inactive                # List of subfolders without cmake build directories
  teh on [project]            # Activate project (creates build dir)
  teh off [project]           # Deactivate project (deletes build dir)
  teh build [project]         # cmake ..; make
  teh rebuild [project]       # rm -rf build; mkdir build; cd build; cmake ..; make


===

elif [ $1 = "project" ];then
cat - <<"==="

  Project
  =======
  teh                         # Summary of projects
  teh repos                   # List of all subdirs with repositories
  teh locate [<dir>]          # Print path of the specified project

  remote
  ------
  teh list                    # List git repos on remote server
  teh listall                 # List git repos (including subdirs) on remote server
  teh get <dir>               # Clone a git repo displayed by 'teh list' locally
  teh new <dir>               # If local project exists, create a remote repo to 
                              # match. Else create local dir and remote dir using
                              # template.


===

elif [ $1 = "setup" ];then

cat - <<"==="

  Setup
  =====
  teh setup <path>            # Configure folder as the root development
                              # folder for a group of projects
  teh set_config <path>       # Update or Create a config file 
  teh setup_ssh_keys          # Install the keys for the server
  teh config                  # Dump the current config file


===

else

cat - <<"==="

teh automates working with groups of development projects. It helps with
    setting up new projects, working with git repositories, building
    cmake projects, and publishing binary packages.

Usage:

  teh help <heading>          # Print only usage under heading

  setup
  =====
  teh setup <path>            # Configure folder as the root development
                              # folder for a group of projects
  teh set_config <path>       # Update or Create a config file 
  teh setup_ssh_keys          # Install the keys for the server
  teh config                  # Dump the current config file


  project
  =======
  teh                         # Summary of projects
  teh repos                   # List of all subdirs with repositories
  teh locate [<dir>]          # Print path of the specified project

  remote
  ------
  teh list                    # List git repos on remote server
  teh listall                 # List git repos (including subdirs) on remote server
  teh get <dir>               # Clone a git repo displayed by 'teh list' locally
  teh new <dir>               # If local project exists, create a remote repo to 
                              # match. Else create local dir and remote dir using
                              # template.


  cmake
  =====
  teh active                  # List of subfolders with cmake build directories
  teh inactive                # List of subfolders without cmake build directories
  teh on [<dir>]              # Activate project (creates build dir)
  teh off [<dir>]             # Deactivate project (deletes build dir)
  teh build [<dir>]           # cmake ..; make
  teh rebuild [<dir>]         # rm -rf build; mkdir build; cd build; cmake ..; make


  git
  ===
  teh git status              # Print status of each project
  teh git branch              # Print branch of each project
  teh git fetch               # Fetch each project


  ubuntu
  ======
  teh setup_repo              # Setup apt-get to use your custom package server
  teh upgrade                 # Upgrade packages from custom server
  teh publish                 # Bump revision numbers, create package with cpack
                              # upload to package server and update package index



  Note: Most functionality expects that the root development folder we are 
        working within contains an marker file called ".development_root".
        > cd $MY_DEVELOPMENT_FOLDER
        > touch .development_root

===
fi
}

# Guide user through making a config file in development root
function teh_config
{
	if [ -z $1 ]; then
		goto_development_root
    else
		cd $1
    fi

	echo -e "\nWriting config file to $(pwd)/.tehrc\n"

	cat - <<"==="

These configuration parameters are used to automate typical accesses to upstream servers.
$SERVER_NAME, $GIT_DIR and $SERVER_USER are used for listing and accessing git repositories.
$REPOSITORY is to support publishing packages to an ubuntu package server and targeted (fast)
upgrades from that server.

===


	read -p "Enter the server address ex:(some_server.com | local_name | 192.168.1.111): " MY_SERVER_ADDR
	read -p "Enter the server user name: " MY_SERVER_USER 
	read -p "Enter the git dir on the server (/home/user/git): " MY_GIT_DIR
	read -p "Enter the ubuntu repository ex:(custom_repo_name): " MY_REPOSITORY

	echo -e "SERVER_NAME=${MY_SERVER_ADDR}" > ./.tehrc
	echo -e "SERVER_USER=${MY_SERVER_USER}" >> ./.tehrc
	echo -e "GIT_DIR=${MY_GIT_DIR}" >> ./.tehrc
	echo -e "REPOSITORY=${MY_REPOSITORY}" >> ./.tehrc

}
# Helper function to make sure git set up correctly
# Parameter $1 is the git key to check (typically 'name' or 'email')
function git_global 
{
	git config --global --get user.$1 &>/dev/null
	RET=$?
	while [ ! $RET -eq 0 ]; do
		echo -e "\n!!! The git global user info is not set..\n"
		read -p "Enter your $1 for git log messages: " gitvalue
		git config --global --add user.$1 $gitvalue
		git config --global --get user.$1 &>/dev/null
		RET=$?
	done
}

function check_for_git_extension
{
		FNAME=${1}
		if [ ${#FNAME} -gt 4 ]; then 
			FNAME=${FNAME:0:${#FNAME} - 4}
			if [ $FNAME = ".git" ]; then
				echo -e "\n[ERROR] Re-run the command without the .git extension... I'll add that automatically."
				exit 1
			fi
		fi
}		

function abort_if_project_does_not_exist
{
	if [ ! -d $1 ]; then
		echo -e "\n[ERROR] The directory $1 (and hence the project $1) does not exist!\n"
		exit
	fi
}

function abort_if_project_is_not_active
{
	if [ ! -d $1/build ]; then
		echo -e "[ERROR] The build directory for $1 does not exist (and hence $1 is deactivated)!\n"
		exit
	fi }

function get_cert
{
  sudo mkdir -p /usr/local/share/ca-certificates
  sudo scp $SERVER_USER@$SERVER_NAME:$1 /usr/local/share/ca-certificates
  sudo update-ca-certificates
  echo "Got cert..."

}
# Get ssl certificates, install them, and add package repository to sources.list.d
function setup_https_package_repo
{
		sudo mkdir -p /usr/local/share/ca-certificates
		sudo scp $SERVER_USER@$SERVER_NAME:${SERVER_NAME}.crt /usr/local/share/ca-certificates
		sudo update-ca-certificates

		sudo sh -c "echo \"deb https://$SERVER_NAME/ubuntu ${REPOSITORY}/\" > /etc/apt/sources.list.d/${REPOSITORY}.list"
		sudo apt-get update
		
		if [ ! $? -eq 0 ]; then
			echo "Something went wrong! Ask someone for help..."
		fi
}
#Add package repository to sources.list.d
function setup_http_package_repo
{
		echo "deb http://$SERVER_NAME/ubuntu ${REPOSITORY}/" > ~/.${REPOSITORY}.list
		sudo cp ~/.${REPOSITORY}.list /etc/apt/sources.list.d/${REPOSITORY}.list
		sudo apt-get update
		
		if [ ! $? -eq 0 ]; then
			echo "Something went wrong! Ask someone for help..."
		fi
}


#Grabs the shared private key from the server and installs it.
#We should create individual keys instead!!!
function setup_ssh_keys
{
		echo -e "\nWe will now create a RSA key file and teel our server ($SERVER_NAME) abount"
		echo -e "it so you don't have to type the password everytime you access the server.\n"
		mkdir -p ~/.ssh
		cd ~/.ssh
		# Create a filename with some random in case others are using the same username
		KEYFILE=$LOGNAME$RANDOM
		# Generate key
		ssh-keygen -t rsa -N "" -f $KEYFILE
		echo -e "\nCopying the key to the server. Enter your password when requested.... \n"
		ssh-copy-id -i $KEYFILE $SERVER_USER@$SERVER_NAME

		echo -e "\nAdding the login details to ~/.ssh/config\n"

		echo "Host $SERVER_NAME" >> ~/.ssh/config
		echo "IdentityFile ~/.ssh/$KEYFILE" >> ~/.ssh/config
		echo "User $SERVER_USER" >> ~/.ssh/config
		echo "" >> ~/.ssh/config
}

# apt-get update on a specific repository
function update_packages
{

sudo apt-get update -o Dir::Etc::sourcelist="sources.list.d/$1" \
-o Dir::Etc::sourceparts="-" -o APT::Get::List-Cleanup="0"
}

# apt-get update on a specific repository
function upgrade_packages
{
	update_packages $1
	sudo apt-get upgrade -y --allow-unauthenticated -o Dir::Etc::sourcelist="sources.list.d/$1" \
	-o Dir::Etc::sourceparts="-" -o APT::Get::List-Cleanup="0"
}

function new_repo 
{

	check_for_git_extension $1
	

	# We need to make a multi-level directory if necessary.
	echo -e "\nChecking to see if this repo is on the server...\n"
	echo "[ ! -d ${GIT_DIR}/${1}.git ] && mkdir -p ${GIT_DIR}/${1}.git" | ssh $SERVER_USER@$SERVER_NAME /bin/bash &>/dev/null
	if [ $? -eq 0 ]; then
		existed=0
		echo "There is no repo of this name on the server yet."
	else
		existed=1
		echo -e "\nThis repo appears to exist already..."
		echo -e "Use $SCRIPTNAME get $1 to get it if you want it.\n"
		exit
	fi

	if [ ! -d ${1} ]; then
		echo -e "\nWe need to create the directory locally first. Choose a template:\n"
		mkdir -p $1
		select what_to_do in "Use bin (exe) template?" "Use library template?" "Abort!"; do
			case $REPLY in
				1) 
                    cp -ar utils/teh_build/templates/bin_template/* $1;  break;;
 
				2) 
                    cp -ar utils/teh_build/templates/lib_template/* $1;  break;;

				3) echo "Aborting new repo!"; exit ;;
			esac
		done
		cd $1; git init; git add .; git commit -m 'First!';
		git remote add origin $SERVER_USER@$SERVER_NAME:/home/$SERVER_USER/git/${1}.git
		echo -e "\nCreating this repo on the server...\n"
		echo "git init --bare ${GIT_DIR}/${1}.git" | ssh $SERVER_USER@$SERVER_NAME /bin/bash &>/dev/null
		git push origin master
		cd ..
	elif [ -d $1/.git ]; then
		if [ $existed -eq 0 ]; then
			echo -e "\nThere is already a git repo with that name locally."
			echo -e "      Pushing it up to the new repo on the server!\n"
			cd $1; 	
			git remote rm origin &>/dev/null; \
			git remote add origin $SERVER_USER@$SERVER_NAME:git/${1}.git &>/dev/null
			echo -e "\nCreating this repo on the server...\n"
			echo "git init --bare ${GIT_DIR}/${1}.git" | ssh $SERVER_USER@$SERVER_NAME /bin/bash &>/dev/null

			git push origin master
			cd ..
			exit
		else
			echo -e "\nThere is already a git repo with that name locally."
			echo -e "      Aborting with no changes made.\n"
			exit
		fi
	fi

}

function get_repos
{
	local git_repos svn_repos
	goto_development_root
	git_repos=$(find . -maxdepth 4 -name .git | sed 's/\/\.git//' |  sed 's/\.\///'| while read prj; do
	[ -f $prj/CMakeLists.txt ] && echo "$prj"
	done)  
	svn_repos=$(find . -maxdepth 4 -name .svn | sed 's/\/\.svn//' | sed 's/\.\///'| while read prj; do
	[ -f $prj/CMakeLists.txt ] && echo "$prj"
	done )
	echo "${git_repos} ${svn_repos}"|sort
	popd &>/dev/null

}
function get_active
{
	goto_development_root
	echo "$(find . -maxdepth 4 -type d -name build | sed 's/\/build//' | sed 's/\.\///' | sort)"
	popd &>/dev/null
}

function get_inactive
{
	comm -13 <(get_active) <(get_repos)
}

