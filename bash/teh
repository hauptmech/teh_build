#!/bin/bash
#
# Traveler Hauptman, Istituto Italiano di Tecnologia, 20 Aug 2013
# 
# Repo Build Publish helper utility

cat > /dev/null <<"==="

This development automation tool requires that some conventions are followed in order for it's 
heuristics to function correctly. The following are the conditions...

'build' 'rebuild' and 'publish' use the $PROJECT/build directory to detect if a project is active. Likewise
the cmake FindPackage scripts check for a $PROJECT/build directory. 
===

SCRIPTNAME=$0

# Import our functions
source teh_functions

pushd ./ &>/dev/null 
# If local or user global config file exists, use it, otherwise error.
while [ ! -f .development_root ] && [ ! -d ./build ] && [ ! -d dev ]; do cd ..; done
if [ -f ./.tehrc ]; then
	source ./.tehrc
elif [ -f ~/.tehrc ]; then
	source ~/.tehrc
else
	echo -e "\n[ERROR] Could not find config file (~/.tehrc or ./.tehrc). It needs the following variables defined...\n"
	cat <<"==="
SERVER_USER=drc
SERVER_NAME=debiangpm
GIT_DIR="/home/drc/git"

GIT_SERVER_NAME=${SERVER_NAME}
GIT_SERVER_USER=${SERVER_USER}
PKG_BASE_NAME=drc
PKG_SERVER_PROTOCOL=ssh #http https
PKG_SERVER_NAME=${SERVER_NAME}
PKG_SERVER_USER=drc
PKG_SERVER_ROOT=/dists

===
fi

popd &>/dev/null #Return to the directory we started from

# Legacy config files don't have GIT_DIR
if [ -z $GIT_DIR ]; then
	GIT_DIR=~/git
fi

if [ $# -lt 1 ]; then
	showroot    
	echo -e "\n\n== Active Projects ================================ (teh active)\n"
	echo "$(get_active)"
	echo -e "\n\n== Inactive Projects ============================== (teh inactive)\n"
	echo "$(get_inactive)"
    echo ""
fi

if [ $# -eq 2 ]; then
	TARGET=${2%/}
	echo -e "\nTARGET is $TARGET \n"
fi
# Check that git is setup, force setup if not.
git_global name
git_global email

# Check which command was given
case "$1" in

	help) # Print out help
		usage $2
;;
	--help) # Print out help
		usage $2
;;
	root) showroot;;
	active) 
		get_active
	;;
	inactive) 
		get_inactive
	;;
	repos)
		get_repos
	;;

	config) 
		if [ -f ./.tehrc ]; then
			cat ./.tehrc
		elif [ -f ~/.tehrc ]; then
			cat ~/.tehrc
		fi
;;
	git)
		if [ -z $2 ];then
          get_repos
        else
		goto_development_root
		find . -name .git | sed 's/\/\.git//' | while read repo; do
			echo -e "\n\n$repo\n===================="
			pushd $repo &>/dev/null
			case "$2" in
				status)
					git status -s 
				;;
				branch)
					git br --no-color | grep \* 
				;;
				fetch)
					git fetch 
				;;
			esac
			popd &>/dev/null
		done
		popd &>/dev/null
        fi
;;

	list) 
		if [ -z $2 ]; then
			echo "ls ${GIT_DIR} " | ssh $SERVER_USER@$SERVER_NAME /bin/bash
		else
			echo "ls ${GIT_DIR}/${TARGET} " | ssh $SERVER_USER@$SERVER_NAME /bin/bash
		fi
		;;

	listall) 
		if [ -z $2 ]; then
			echo "cd ${GIT_DIR};find . -type d -name \"*.git\" " | ssh $SERVER_USER@$SERVER_NAME /bin/bash
		else
			echo "cd ${GIT_DIR}/${TARGET};find . -type d -name \"*.git\"" | ssh $SERVER_USER@$SERVER_NAME /bin/bash
		fi
		;;

	locate) locate_project ${2}
	;;


	init) 
		if [ -z ${TARGET} ]; then
			TARGET="./"
        fi

		if [ -d ${TARGET} ]; then 
			echo -e "\nDirectory ${TARGET} already exists.\n" 
            read -p "Are you sure you want me to add teh specific stuff here? [y/N] " mess_with_this
            mess_with_this=${mess_with_this:-N}
            if [ ! $mess_with_this = "Y" ] && [ ! $mess_with_this = "y" ]; then 
				exit 
			else
				mkdir -p ${TARGET}
			fi
		else
			mkdir -p ${TARGET}
		fi
		cd ${TARGET}
		touch .development_root  # Marker to stop searches for local libraries from bubbling up too much
		teh_config ${TARGET}

		echo -e "Cloning Build_Tools, CMakeModules, Demo_Library, Demo_Application"

		mkdir -p utils; cd utils
		git clone https://github.com/hauptmech/teh_build.git teh_build
		#git clone $SERVER_USER@$SERVER_NAME:git/utils/Demo_Application.git
		#git clone $SERVER_USER@$SERVER_NAME:git/utils/Demo_Library.git

		;;

	setup_ssh_keys)	# Install the ssh keys so you don't have to type them all the time
		setup_ssh_keys ;;

	setup_repo)	# Install ssl keys and sources.list file
		setup_http_package_repo ;;

	upgrade) upgrade_packages ${PKG_BASE_NAME}.list
		;;

	get)	# Get an existing repository

		goto_development_root

		check_for_git_extension $1
		[ -d ${TARGET} ] && echo -e "\n[INFO] Repository already exists!\n" && exit 0
	
		mkdir -p ${TARGET}
		git clone $SERVER_USER@$SERVER_NAME:git/${TARGET}.git ${TARGET}
		
		if [ ! $? -eq 0 ]; then
			echo -e "\n[ERROR] git clone failed... double check the name (or server ip address hardcoded in the teh script\n"
		fi
	;;

	new)	# Create a new repository on the server
		goto_development_root
		new_repo ${TARGET}
	;;

	publish) 
		locate_project ${2}
		goto_development_root
		# Remove old packages
		# Increment version numbers
		# Build new packages
		# Copy *.deb to repository
		# Rebuild repository index
		abort_if_project_does_not_exist ${TARGET}
		abort_if_project_is_not_active ${TARGET}
		rm -f ${TARGET}/build/*.deb	#Delete old debs

		read -p "Does $(basename ${TARGET}) have non-backward compatible changes? [y/N] " api_change
		api_change=${api_change:-N}
		if [ $api_change = "N" ]; then
			read -p "Does $(basename ${TARGET}) have new (but backward compatible) features? [y/N] " feature_change
			feature_change=${feature_change:-N}

			if [ $feature_change = "N" ]; then
				echo "Increment only build version"
				#Perl fu from the interwebs
				perl -pi.bak -e \
					's/VERSION_PATCH \"(\d+)\"/ q{VERSION_PATCH "} . (1 + $1) . q{"} /ge' \
					${TARGET}/CMakeLists.txt

			else
				echo "Increment feature version, zero build version"
				perl -pi.bak -e \
					's/VERSION_PATCH \"(\d+)\"/ q{VERSION_PATCH "} . (0) . q{"} /ge' \
					${TARGET}/CMakeLists.txt
				perl -pi.bak -e \
					's/VERSION_MINOR \"(\d+)\"/ q{VERSION_MINOR "} . (1 + $1) . q{"} /ge' \
					${TARGET}/CMakeLists.txt
			fi

		else
			echo "Increment API version, zero others"	
				perl -pi.bak -e \
					's/VERSION_PATCH \"(\d+)\"/ q{VERSION_PATCH "} . (0) . q{"} /ge' \
					${TARGET}/CMakeLists.txt
				perl -pi.bak -e \
					's/VERSION_MINOR \"(\d+)\"/ q{VERSION_MINOR "} . (0) . q{"} /ge' \
					${TARGET}/CMakeLists.txt
				perl -pi.bak -e \
					's/VERSION_MAJOR \"(\d+)\"/ q{VERSION_MAJOR "} . (1 + $1) . q{"} /ge' \
					${TARGET}/CMakeLists.txt
		fi

		if [ -d ${TARGET}/build ]; then 
			pushd ${TARGET}/build; 
		else 
			echo "Project has not been built yet; do this manually!"; exit 
		fi
		cmake ..  #If the version changed we need to run cmake to update it
		make		#Just to be sure 
		cpack		#Finally do the packaging
	
		#scp *.deb $SERVER_USER@$SERVER_NAME:/var/ubuntu_repo/${REPOSITORY}
		#ToDo: Extract 
		DEBARCH=$(dpkg --info *.deb | grep -oP 'Architecture: \K.*' | head -n 1)
		DEBLOCAL=${PKG_SERVER_ROOT}/${PKG_BASE_NAME}/local
		scp *.deb $PKG_SERVER_USER@$PKG_SERVER_NAME:${DEBLOCAL}/binary-${DEBARCH}

		echo "cd ${DEBLOCAL}; bash update.sh; ls -l ${DEBLOCAL}/binary-${DEBARCH}" | ssh $PKG_SERVER_USER@$PKG_SERVER_NAME /bin/bash
		popd
		ls ${TARGET}/build | grep deb
		

	cat <<"==="

===
;;
on)
	locate_project ${2}
	
	#TARGET=$(pwd)
	echo "Target: $TARGET"
	if [ -d ${TARGET}/build ]; then
		echo -e "\n ${TARGET} is already activated.\n"
		exit 1
	fi
	mkdir -p ${TARGET}/build
;;
off)
	locate_project ${2}
#	TARGET=$(pwd)
	
	if [ ! -d ${TARGET}/build ]; then
		echo -e "\n ${TARGET} is either already deactivated or is not a project.\n"
		exit
	fi
	rm -rf ${TARGET}/build
;;
build) # Build project
	locate_project ${2}
	goto_development_root

	if [ ! -d ${TARGET}/build ]; then
		mkdir ${TARGET}/build
		if [ ! $? -eq 0 ]; then 
			echo -e "\nTried to activate ${TARGET} but it does not appear to be a project director so I'm aborting! \n\n"
			exit 1
		fi
	fi
	echo -e "Activating project ${TARGET}.... You can do it by hand like this:\n\n"
	echo -e "> cd ${TARGET}; mkdir build; cd build\n> cmake ..\n> make"
	cd ${TARGET}/build
	cmake ..
	make

;;


rebuild) # Build project
	locate_project ${2}
	goto_development_root

	if [ ! -d ${TARGET}/build ]; then
		mkdir ${TARGET}/build
		if [ ! $? -eq 0 ]; then 
			echo -e "\nTried to activate ${TARGET} but it does not appear to be a project directory so I'm aborting! \n\n"
			exit 1
		fi
	fi
	echo -e "Activating project ${TARGET}.... You can do it by hand like this:\n\n"
	echo -e "> cd ${TARGET}; rm -rf build; mkdir build; cd build\n> cmake ..\n> make\n"
	
	cd ${TARGET}
	rm -rf build
	mkdir build
	cd build
	cmake ..
	make

;;

set_config) #Setup local config file
		teh_config ${2}
;;

get_cert) #Grab an authentication certificate from the server
	get_cert ${2}
;;

esac

popd &>/dev/null #Return to the directory we started from
